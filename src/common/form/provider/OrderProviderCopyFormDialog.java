package common.form.provider;

import common.constants.ApplicationConstants;
import common.exceptions.BusinessException;
import common.exceptions.DataOriginException;
import common.exceptions.NoDataFoundException;
import common.model.Renta;
import common.model.providers.OrdenProveedor;
import common.model.providers.OrderProviderCopyParameter;
import common.model.providers.ParameterOrderProvider;
import common.services.RentaService;
import common.services.providers.OrderProviderService;
import common.tables.TableViewOrdersProviders;
import common.utilities.UtilityCommon;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

public class OrderProviderCopyFormDialog extends javax.swing.JDialog {
    
    private static final org.apache.log4j.Logger log = 
            org.apache.log4j.Logger.getLogger(OrderProviderCopyFormDialog.class.getName());
    private final OrderProviderCopyParameter orderProviderCopyParameter;
    private final TableViewOrdersProviders tableViewOrdersProviders;
    private static final DecimalFormat decimalFormat = 
            new DecimalFormat( ApplicationConstants.DECIMAL_FORMAT_SHORT );
    private final OrderProviderService orderService;
    private Boolean successfulChangesDetected;
    private List<OrdenProveedor> initialOrders;
    private String folioToCopy;
    private Integer rentaIdToCopy;
    private final RentaService rentaService;
    private final String TOOL_TIP_TEX_BNT_COPY = "Ingresa el folio para copiar las ordenes.";
    private final String TOOL_TIP_TEX_BNT_COPY_SUCCESS = "Copiar ordenes.";

    public OrderProviderCopyFormDialog(java.awt.Frame parent, boolean modal, 
            OrderProviderCopyParameter orderProviderCopyParameter) {
        super(parent, modal);
        initComponents();
        this.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - getWidth()/2, (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - getHeight()/2);
        this.setTitle("Copiar ordenes de proveedor.");
        this.orderProviderCopyParameter = orderProviderCopyParameter;
        tableViewOrdersProviders = new TableViewOrdersProviders();
        initialOrders = new ArrayList<>();
        orderService = OrderProviderService.getInstance();
        rentaService = RentaService.getInstance();
        UtilityCommon.addJtableToPane(940, 940, panelTable, tableViewOrdersProviders);
        this.txtFolio.requestFocus();
        getInitialOrders();
        addEscapeListener();
        successfulChangesDetected = false;
        disableBtnCopy();
        lblInfo.setText("Ingresa el folio al que quieres copiar las ordenes.");
        
    }   
    
    public Boolean showDialog () {
        setVisible(true);
        return successfulChangesDetected;
    }
    
    // close dialog when esc is pressed.
    private void addEscapeListener() {
        ActionListener escListener = (ActionEvent e) -> {
            setVisible(false);
            dispose();
        };

        this.getRootPane().registerKeyboardAction(escListener,
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_IN_FOCUSED_WINDOW);

    }
    
    private void updateOrders () throws Exception{
        List<OrdenProveedor> ordersToUpdate = new ArrayList<>(initialOrders);
        for(OrdenProveedor order : ordersToUpdate){
            OrdenProveedor cloneOrder = order.copy();
            StringBuilder originalCommentToUpdate = new StringBuilder();
            originalCommentToUpdate.append(order.getComentario());                

            cloneOrder.setComentario(
                    originalCommentToUpdate.append("-- Autogenerated: Se copio al folio: ")
                        .append(folioToCopy).toString()
            );
            cloneOrder.setStatus(ApplicationConstants.STATUS_ORDER_PROVIDER_CANCELLED);
            cloneOrder.setDetalleOrdenProveedorList(null);
            orderService.updateOrder(cloneOrder);
        }
    }
    
    private void createOrdersFolioToCopy () throws Exception{        
        List<OrdenProveedor> ordersToSave = new ArrayList<>(initialOrders);
        for(OrdenProveedor order : ordersToSave){
            OrdenProveedor cloneOrder = order.copy();
            StringBuilder originalCommentToSave = new StringBuilder();               
            originalCommentToSave.append(order.getComentario());
            cloneOrder.getUsuario().setUsuarioId(orderProviderCopyParameter.getUsuarioId());
            cloneOrder.setComentario(
                     originalCommentToSave.append("-- Autogenerated: Se copio desde el folio: ")
                             .append(order.getRenta().getFolio())
                             .append(", num orden anterior: ")
                    .append(order.getId()).toString()
            );
            cloneOrder.setRenta(
                    new Renta(rentaIdToCopy));
            orderService.saveOrder(cloneOrder);
        }
    }
    
    private void copyOrders () {
        try {
            
            CompletableFuture<Void> updateOrdersFuture = CompletableFuture.runAsync(() -> {
                try {
                    updateOrders();
                } catch (final Exception exception) {
                    JOptionPane.showMessageDialog(this, exception, 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
                    log.error(exception.getMessage(),exception);
                    throw new RuntimeException();
                }
            });

            CompletableFuture<Void> createOrdersFolioToCopyFuture = CompletableFuture.runAsync(() -> {
                try {
                    createOrdersFolioToCopy();
                } catch (final Exception exception) {
                    JOptionPane.showMessageDialog(this, exception, 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
                    log.error(exception.getMessage(),exception);
                    throw new RuntimeException();
                }
            });

            CompletableFuture.allOf(updateOrdersFuture, createOrdersFolioToCopyFuture).join();      

            ParameterOrderProvider parameter = new ParameterOrderProvider();
            parameter.setLimit(10000);
            parameter.setFolioRenta(Integer.parseInt(folioToCopy));
            List<OrdenProveedor> list = orderService.getOrdersByParameters(parameter);
            tableViewOrdersProviders.format();
            fillTable(list);
            disableBtnCopy();
            final String messageSuccessfully = "Se copiaron las ordenes con Ã©xito";
            lblInfo.setText(messageSuccessfully);
            successfulChangesDetected = true;
            JOptionPane.showMessageDialog(this, messageSuccessfully,
                    ApplicationConstants.MESSAGE_SAVE_SUCCESSFUL, JOptionPane.INFORMATION_MESSAGE);
         } catch (Exception exception) { 
            JOptionPane.showMessageDialog(this, exception, 
            ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
            log.error(exception.getMessage(),exception);
            successfulChangesDetected = false;
        } finally {
           Toolkit.getDefaultToolkit();
        }  
        
    }
    
    private void getByFolio () {
        
        disableBtnCopy();
        final String folioToSearch = UtilityCommon.onlyNumbers(txtFolio.getText().trim());
        
        if (folioToSearch.isEmpty()) {
            return;
        }
        
        if (folioToSearch.length() > 9) {
            JOptionPane.showMessageDialog(this, "Ingresa un folio valido.", 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (OrdenProveedor order : initialOrders) {
            String folio = order.getRenta().getFolio()+"";
            if (folioToSearch.equals(folio)) {
                JOptionPane.showMessageDialog(this, "Ops, el folio "+txtFolio.getText().trim()+" al que quieres copiar "
                        + " ya se encuentra en esta orden: "+order.getId()+", por favor ingresa un folio diferente o elimina esta orden "
                                + order.getId()+" para continuar.", 
                        ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
                txtFolio.requestFocus();
                txtFolio.selectAll();
                return;
            }
        }
        
        try {
            Renta renta = 
                    rentaService.getByFolio(Integer.parseInt(folioToSearch));
            
            if (renta == null) {
                lblInfo.setText("No se encontro el folio: "+folioToSearch);                
                txtFolio.requestFocus();
                txtFolio.selectAll();
                return;
            }
            rentaIdToCopy = renta.getRentaId();
        } catch (DataOriginException | BusinessException exception) {
            JOptionPane.showMessageDialog(this, exception, 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
            return;
        }
                
        try {
            ParameterOrderProvider parameter = new ParameterOrderProvider();
            parameter.setLimit(10000);
            parameter.setFolioRenta(Integer.parseInt(txtFolio.getText().trim()));
            List<OrdenProveedor> ordersProvider = orderService.getOrdersByParameters(parameter);
            tableViewOrdersProviders.format();
            fillTable(initialOrders);
            fillTable(ordersProvider);
            enableBtnCopy();
            this.folioToCopy = folioToSearch;
            lblInfo.setText("Folio: ["+folioToSearch+"] encontrado con Ã©xito, "
                    + "total de ordenes: ["+ordersProvider.size()+"].");
            txtFolio.setEnabled(false);
            btnSearchByFolio.setEnabled(false);
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "Ingresa un folio valido.", 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
            disableBtnCopy();
            log.error(numberFormatException.getMessage(),numberFormatException);
        } catch (NoDataFoundException noDataFoundException) {
            enableBtnCopy();
            lblInfo.setText("Folio: ["+folioToSearch+"] encontrado con Ã©xito, "
                    + "total de ordenes: [0].");
            txtFolio.setEnabled(false);
            this.folioToCopy = folioToSearch;
            log.error(noDataFoundException.getMessage(),noDataFoundException);
            btnSearchByFolio.setEnabled(false);
        } catch (BusinessException exception) {
            JOptionPane.showMessageDialog(this, exception, 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
            disableBtnCopy();
            lblInfo.setText("Ops ocurrio un error.");
            log.error(exception.getMessage(),exception);
        } finally {
           Toolkit.getDefaultToolkit();
        }  
    }
    
    private void disableBtnCopy () {
        this.btnCopy.setEnabled(false);
        btnCopy.setToolTipText(TOOL_TIP_TEX_BNT_COPY);
    }
    
    private void enableBtnCopy () {
        this.btnCopy.setEnabled(true);
        btnCopy.setToolTipText(TOOL_TIP_TEX_BNT_COPY_SUCCESS);
    }
    
    private void getInitialOrders () {
        
        if (!initialOrders.isEmpty()) {
            tableViewOrdersProviders.format();
            fillTable(initialOrders);
            return;
        }
        
        try {
            ParameterOrderProvider parameter = new ParameterOrderProvider();
            parameter.setLimit(10000);
            parameter.setOrders(this.orderProviderCopyParameter.getOrders());
            initialOrders = orderService.getOrdersByParameters(parameter);
            
            for (OrdenProveedor order : initialOrders) {
                order.setDetalleOrdenProveedorList(
                        orderService.getDetailProviderByOrderId(order.getId())
                );
            }
            
            tableViewOrdersProviders.format();
            fillTable(initialOrders);
        } catch (BusinessException exception) {
            JOptionPane.showMessageDialog(this, exception.getMessage(), 
                    ApplicationConstants.MESSAGE_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
            log.error(exception.getMessage(),exception);
        }
    }
    
    private void fillTable (List<OrdenProveedor> orders) {
       
       DefaultTableModel tableModel = (DefaultTableModel) tableViewOrdersProviders.getModel();
       for(OrdenProveedor orden : orders){      

            Object fila[] = {
                false,
                orden.getId(),
                orden.getRenta().getFolio(),
                orden.getUsuario().getNombre()+" "+orden.getUsuario().getApellidos(),
                orden.getProveedor().getNombre()+" "+orden.getProveedor().getApellidos(),
                orden.getStatusDescription(),
                orden.getCreado(),
                orden.getActualizado(),
                orden.getComentario(),
                orden.getRenta().getRentaId(),             
                decimalFormat.format(orden.getTotal()),
                orden.getAbonos() > 0 ? decimalFormat.format(orden.getAbonos()) : "",
                decimalFormat.format((orden.getTotal() - orden.getAbonos())),
                orden.getRenta().getFechaEvento()
              };
              tableModel.addRow(fila);

       }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        panelTable = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtFolio = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearchByFolio = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        txtFolio.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFolio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFolioKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFolioKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Copiar ordenes al folio:  ");

        btnSearchByFolio.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSearchByFolio.setText("Buscar folio");
        btnSearchByFolio.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchByFolio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByFolioActionPerformed(evt);
            }
        });

        btnCopy.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnCopy.setText("Copiar");
        btnCopy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        btnClean.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnClean.setText("Limpiar");
        btnClean.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        lblInfo.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        lblInfo.setText("jLabel2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchByFolio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClean)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopy)
                .addContainerGap(536, Short.MAX_VALUE))
            .addComponent(lblInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByFolio)
                    .addComponent(btnClean)
                    .addComponent(btnCopy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        getInitialOrders();
        txtFolio.setEnabled(true);
        txtFolio.requestFocus();
        txtFolio.selectAll();        
        lblInfo.setText("");
        btnCopy.setEnabled(false);
        successfulChangesDetected = false;
        btnSearchByFolio.setEnabled(true);
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnSearchByFolioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByFolioActionPerformed
        getByFolio();
    }//GEN-LAST:event_btnSearchByFolioActionPerformed

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        
        new Thread(() -> {
            lblInfo.setText("Procesando, por favor espere...");
            btnCopy.setEnabled(false);
        }).start();
        UtilityCommon.setTimeout(() -> copyOrders(), 1000);
        
    }//GEN-LAST:event_btnCopyActionPerformed

    private void txtFolioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFolioKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            getByFolio();
        }
    }//GEN-LAST:event_txtFolioKeyPressed

    private void txtFolioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFolioKeyReleased

    }//GEN-LAST:event_txtFolioKeyReleased

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderProviderCopyFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderProviderCopyFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderProviderCopyFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderProviderCopyFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OrderProviderCopyFormDialog dialog = new OrderProviderCopyFormDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnSearchByFolio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JPanel panelTable;
    private javax.swing.JTextField txtFolio;
    // End of variables declaration//GEN-END:variables
}
